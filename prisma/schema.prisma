generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             Role              @default(USER)
  bio              String?
  phone            String?
  location         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  advertisements   Advertisement[]
  favorites        Favorite[]
  listings         Listing[]
  messages         Message[]
  sessions         Session[]
  termsAcceptances TermsAcceptance[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  listings Listing[]
}

model Listing {
  id              String        @id @default(cuid())
  title           String
  description     String
  price           Float
  images          String        @default("[]")
  location        String
  status          ListingStatus @default(PENDING)
  rejectionReason String?
  featured        Boolean       @default(false)
  views           Int           @default(0)
  categoryId      String
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  favorites       Favorite[]
  category        Category      @relation(fields: [categoryId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        Message[]
  productViews    ProductView[]
}

model Message {
  id         String   @id @default(cuid())
  content    String
  fromUserId String
  listingId  String
  flagged    Boolean  @default(false)
  createdAt  DateTime @default(now())
  fromUser   User     @relation(fields: [fromUserId], references: [id])
  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  createdAt DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
}

model ProductView {
  id        String   @id @default(cuid())
  listingId String
  ipAddress String
  userAgent String?
  userId    String?
  viewedAt  DateTime @default(now())
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, ipAddress])
  @@index([listingId])
  @@index([ipAddress])
}

model TermsAcceptance {
  id             String   @id @default(cuid())
  userId         String
  termsVersion   String
  privacyVersion String
  acceptedAt     DateTime @default(now())
  ipAddress      String?
  userAgent      String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, termsVersion, privacyVersion])
  @@index([userId])
  @@index([termsVersion])
  @@index([privacyVersion])
}

model Advertisement {
  id                String               @id @default(cuid())
  company           String
  headline          String
  description       String
  ctaText           String
  ctaUrl            String
  backgroundImage   String?
  backgroundColor   String               @default("from-blue-600 to-purple-600")
  textColor         String               @default("text-white")
  isActive          Boolean              @default(true)
  priority          AdvertisementPriority @default(MEDIUM)
  startDate         DateTime?
  endDate           DateTime?
  budget            Float?
  targetAudience    String?              // JSON string for audience targeting
  clickCount        Int                  @default(0)
  impressionCount   Int                  @default(0)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  createdByUserId   String
  createdBy         User                 @relation(fields: [createdByUserId], references: [id])

  @@index([isActive])
  @@index([priority])
  @@index([startDate])
  @@index([endDate])
}

enum Role {
  ADMIN
  USER
}

enum ListingStatus {
  ACTIVE
  PENDING
  ARCHIVED
  FLAGGED
}

enum AdvertisementPriority {
  LOW
  MEDIUM
  HIGH
}
