generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   
  role          Role      @default(USER)
  bio           String?
  phone         String?
  location      String?
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  messages      Message[]
  favorites     Favorite[]
  termsAcceptances TermsAcceptance[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  listings Listing[]
}

model Listing {
  id          String        @id @default(cuid())
  title       String
  description String
  price       Float
  images      String        @default("[]")
  location    String
  status        ListingStatus @default(PENDING)
  rejectionReason String?     // Reason for rejection if status is ARCHIVED
  featured      Boolean       @default(false)
  views         Int           @default(0)
  categoryId  String
  userId      String
  category    Category      @relation(fields: [categoryId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
  favorites   Favorite[]
  productViews ProductView[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  fromUserId String
  listingId String
  flagged   Boolean  @default(false)
  fromUser  User     @relation(fields: [fromUserId], references: [id])
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  listingId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}

model ProductView {
  id        String   @id @default(cuid())
  listingId String
  ipAddress String
  userAgent String?
  userId    String?  // Optional: track authenticated users too
  viewedAt  DateTime @default(now())
  
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@unique([listingId, ipAddress])
  @@index([listingId])
  @@index([ipAddress])
}

model TermsAcceptance {
  id              String   @id @default(cuid())
  userId          String
  termsVersion    String   // Version identifier (e.g., "1.0", "2.1")
  privacyVersion  String   // Privacy policy version
  acceptedAt      DateTime @default(now())
  ipAddress       String?  // IP address when accepted
  userAgent       String?  // Browser/device info
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, termsVersion, privacyVersion])
  @@index([userId])
  @@index([termsVersion])
  @@index([privacyVersion])
}

enum Role {
  ADMIN
  USER
}

enum ListingStatus {
  ACTIVE
  PENDING
  ARCHIVED
  FLAGGED
}